// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVariants(t *testing.T) {
	t.Parallel()

	query := Variants()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVariantsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Variants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVariantsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Variants().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Variants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVariantsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VariantSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Variants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVariantsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VariantExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Variant exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VariantExists to return true, but got false.")
	}
}

func testVariantsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	variantFound, err := FindVariant(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if variantFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVariantsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Variants().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVariantsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Variants().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVariantsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	variantOne := &Variant{}
	variantTwo := &Variant{}
	if err = randomize.Struct(seed, variantOne, variantDBTypes, false, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}
	if err = randomize.Struct(seed, variantTwo, variantDBTypes, false, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = variantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = variantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Variants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVariantsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	variantOne := &Variant{}
	variantTwo := &Variant{}
	if err = randomize.Struct(seed, variantOne, variantDBTypes, false, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}
	if err = randomize.Struct(seed, variantTwo, variantDBTypes, false, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = variantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = variantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Variants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func variantBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Variant) error {
	*o = Variant{}
	return nil
}

func variantAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Variant) error {
	*o = Variant{}
	return nil
}

func variantAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Variant) error {
	*o = Variant{}
	return nil
}

func variantBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Variant) error {
	*o = Variant{}
	return nil
}

func variantAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Variant) error {
	*o = Variant{}
	return nil
}

func variantBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Variant) error {
	*o = Variant{}
	return nil
}

func variantAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Variant) error {
	*o = Variant{}
	return nil
}

func variantBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Variant) error {
	*o = Variant{}
	return nil
}

func variantAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Variant) error {
	*o = Variant{}
	return nil
}

func testVariantsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Variant{}
	o := &Variant{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, variantDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Variant object: %s", err)
	}

	AddVariantHook(boil.BeforeInsertHook, variantBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	variantBeforeInsertHooks = []VariantHook{}

	AddVariantHook(boil.AfterInsertHook, variantAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	variantAfterInsertHooks = []VariantHook{}

	AddVariantHook(boil.AfterSelectHook, variantAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	variantAfterSelectHooks = []VariantHook{}

	AddVariantHook(boil.BeforeUpdateHook, variantBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	variantBeforeUpdateHooks = []VariantHook{}

	AddVariantHook(boil.AfterUpdateHook, variantAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	variantAfterUpdateHooks = []VariantHook{}

	AddVariantHook(boil.BeforeDeleteHook, variantBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	variantBeforeDeleteHooks = []VariantHook{}

	AddVariantHook(boil.AfterDeleteHook, variantAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	variantAfterDeleteHooks = []VariantHook{}

	AddVariantHook(boil.BeforeUpsertHook, variantBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	variantBeforeUpsertHooks = []VariantHook{}

	AddVariantHook(boil.AfterUpsertHook, variantAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	variantAfterUpsertHooks = []VariantHook{}
}

func testVariantsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Variants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVariantsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(variantColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Variants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVariantToOneArticleUsingArticle(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Variant
	var foreign Article

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, variantDBTypes, false, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, articleDBTypes, false, articleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Article struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ArticleID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Article().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := VariantSlice{&local}
	if err = local.L.LoadArticle(ctx, tx, false, (*[]*Variant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Article == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Article = nil
	if err = local.L.LoadArticle(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Article == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVariantToOneSetOpArticleUsingArticle(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Variant
	var b, c Article

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, variantDBTypes, false, strmangle.SetComplement(variantPrimaryKeyColumns, variantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, articleDBTypes, false, strmangle.SetComplement(articlePrimaryKeyColumns, articleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, articleDBTypes, false, strmangle.SetComplement(articlePrimaryKeyColumns, articleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Article{&b, &c} {
		err = a.SetArticle(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Article != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Variants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ArticleID != x.ID {
			t.Error("foreign key was wrong value", a.ArticleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ArticleID))
		reflect.Indirect(reflect.ValueOf(&a.ArticleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ArticleID != x.ID {
			t.Error("foreign key was wrong value", a.ArticleID, x.ID)
		}
	}
}

func testVariantsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVariantsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VariantSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVariantsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Variants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	variantDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `ArticleID`: `integer`, `Labels`: `ARRAYtext`, `Multiplier`: `numeric`}
	_              = bytes.MinRead
)

func testVariantsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(variantPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(variantAllColumns) == len(variantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Variants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, variantDBTypes, true, variantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVariantsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(variantAllColumns) == len(variantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Variant{}
	if err = randomize.Struct(seed, o, variantDBTypes, true, variantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Variants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, variantDBTypes, true, variantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(variantAllColumns, variantPrimaryKeyColumns) {
		fields = variantAllColumns
	} else {
		fields = strmangle.SetComplement(
			variantAllColumns,
			variantPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VariantSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVariantsUpsert(t *testing.T) {
	t.Parallel()

	if len(variantAllColumns) == len(variantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Variant{}
	if err = randomize.Struct(seed, &o, variantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Variant: %s", err)
	}

	count, err := Variants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, variantDBTypes, false, variantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Variant struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Variant: %s", err)
	}

	count, err = Variants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

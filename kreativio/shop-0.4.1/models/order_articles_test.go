// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrderArticles(t *testing.T) {
	t.Parallel()

	query := OrderArticles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrderArticlesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderArticles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderArticlesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrderArticles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderArticles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderArticlesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderArticleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderArticles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderArticlesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrderArticleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrderArticle exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrderArticleExists to return true, but got false.")
	}
}

func testOrderArticlesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orderArticleFound, err := FindOrderArticle(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orderArticleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrderArticlesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrderArticles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrderArticlesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrderArticles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrderArticlesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderArticleOne := &OrderArticle{}
	orderArticleTwo := &OrderArticle{}
	if err = randomize.Struct(seed, orderArticleOne, orderArticleDBTypes, false, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}
	if err = randomize.Struct(seed, orderArticleTwo, orderArticleDBTypes, false, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderArticleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderArticleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderArticles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrderArticlesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orderArticleOne := &OrderArticle{}
	orderArticleTwo := &OrderArticle{}
	if err = randomize.Struct(seed, orderArticleOne, orderArticleDBTypes, false, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}
	if err = randomize.Struct(seed, orderArticleTwo, orderArticleDBTypes, false, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderArticleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderArticleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderArticles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func orderArticleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderArticle) error {
	*o = OrderArticle{}
	return nil
}

func orderArticleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderArticle) error {
	*o = OrderArticle{}
	return nil
}

func orderArticleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OrderArticle) error {
	*o = OrderArticle{}
	return nil
}

func orderArticleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrderArticle) error {
	*o = OrderArticle{}
	return nil
}

func orderArticleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrderArticle) error {
	*o = OrderArticle{}
	return nil
}

func orderArticleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrderArticle) error {
	*o = OrderArticle{}
	return nil
}

func orderArticleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrderArticle) error {
	*o = OrderArticle{}
	return nil
}

func orderArticleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderArticle) error {
	*o = OrderArticle{}
	return nil
}

func orderArticleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderArticle) error {
	*o = OrderArticle{}
	return nil
}

func testOrderArticlesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OrderArticle{}
	o := &OrderArticle{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, orderArticleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrderArticle object: %s", err)
	}

	AddOrderArticleHook(boil.BeforeInsertHook, orderArticleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	orderArticleBeforeInsertHooks = []OrderArticleHook{}

	AddOrderArticleHook(boil.AfterInsertHook, orderArticleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	orderArticleAfterInsertHooks = []OrderArticleHook{}

	AddOrderArticleHook(boil.AfterSelectHook, orderArticleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	orderArticleAfterSelectHooks = []OrderArticleHook{}

	AddOrderArticleHook(boil.BeforeUpdateHook, orderArticleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	orderArticleBeforeUpdateHooks = []OrderArticleHook{}

	AddOrderArticleHook(boil.AfterUpdateHook, orderArticleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	orderArticleAfterUpdateHooks = []OrderArticleHook{}

	AddOrderArticleHook(boil.BeforeDeleteHook, orderArticleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	orderArticleBeforeDeleteHooks = []OrderArticleHook{}

	AddOrderArticleHook(boil.AfterDeleteHook, orderArticleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	orderArticleAfterDeleteHooks = []OrderArticleHook{}

	AddOrderArticleHook(boil.BeforeUpsertHook, orderArticleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	orderArticleBeforeUpsertHooks = []OrderArticleHook{}

	AddOrderArticleHook(boil.AfterUpsertHook, orderArticleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	orderArticleAfterUpsertHooks = []OrderArticleHook{}
}

func testOrderArticlesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderArticles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderArticlesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orderArticleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrderArticles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderArticleToOneOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderArticle
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderArticleDBTypes, false, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrderID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrderArticleSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*OrderArticle)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrderArticleToOneSetOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderArticle
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderArticleDBTypes, false, strmangle.SetComplement(orderArticlePrimaryKeyColumns, orderArticleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderArticles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrderID != x.ID {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderID))
		reflect.Indirect(reflect.ValueOf(&a.OrderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OrderID != x.ID {
			t.Error("foreign key was wrong value", a.OrderID, x.ID)
		}
	}
}

func testOrderArticlesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderArticlesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderArticleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderArticlesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderArticles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orderArticleDBTypes = map[string]string{`OrderID`: `integer`, `ArticleID`: `integer`, `Amount`: `integer`, `ID`: `integer`, `Title`: `text`, `Price`: `numeric`, `Details`: `jsonb`}
	_                   = bytes.MinRead
)

func testOrderArticlesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orderArticlePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orderArticleAllColumns) == len(orderArticlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderArticles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrderArticlesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orderArticleAllColumns) == len(orderArticlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderArticle{}
	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderArticles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderArticleDBTypes, true, orderArticlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orderArticleAllColumns, orderArticlePrimaryKeyColumns) {
		fields = orderArticleAllColumns
	} else {
		fields = strmangle.SetComplement(
			orderArticleAllColumns,
			orderArticlePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrderArticleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrderArticlesUpsert(t *testing.T) {
	t.Parallel()

	if len(orderArticleAllColumns) == len(orderArticlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrderArticle{}
	if err = randomize.Struct(seed, &o, orderArticleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrderArticle: %s", err)
	}

	count, err := OrderArticles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, orderArticleDBTypes, false, orderArticlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderArticle struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrderArticle: %s", err)
	}

	count, err = OrderArticles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Articles", testArticles)
	t.Run("BasePrices", testBasePrices)
	t.Run("Categories", testCategories)
	t.Run("Images", testImages)
	t.Run("Messages", testMessages)
	t.Run("OrderArticles", testOrderArticles)
	t.Run("Orders", testOrders)
	t.Run("PaymentStatuses", testPaymentStatuses)
	t.Run("Variants", testVariants)
	t.Run("Videos", testVideos)
}

func TestDelete(t *testing.T) {
	t.Run("Articles", testArticlesDelete)
	t.Run("BasePrices", testBasePricesDelete)
	t.Run("Categories", testCategoriesDelete)
	t.Run("Images", testImagesDelete)
	t.Run("Messages", testMessagesDelete)
	t.Run("OrderArticles", testOrderArticlesDelete)
	t.Run("Orders", testOrdersDelete)
	t.Run("PaymentStatuses", testPaymentStatusesDelete)
	t.Run("Variants", testVariantsDelete)
	t.Run("Videos", testVideosDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Articles", testArticlesQueryDeleteAll)
	t.Run("BasePrices", testBasePricesQueryDeleteAll)
	t.Run("Categories", testCategoriesQueryDeleteAll)
	t.Run("Images", testImagesQueryDeleteAll)
	t.Run("Messages", testMessagesQueryDeleteAll)
	t.Run("OrderArticles", testOrderArticlesQueryDeleteAll)
	t.Run("Orders", testOrdersQueryDeleteAll)
	t.Run("PaymentStatuses", testPaymentStatusesQueryDeleteAll)
	t.Run("Variants", testVariantsQueryDeleteAll)
	t.Run("Videos", testVideosQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Articles", testArticlesSliceDeleteAll)
	t.Run("BasePrices", testBasePricesSliceDeleteAll)
	t.Run("Categories", testCategoriesSliceDeleteAll)
	t.Run("Images", testImagesSliceDeleteAll)
	t.Run("Messages", testMessagesSliceDeleteAll)
	t.Run("OrderArticles", testOrderArticlesSliceDeleteAll)
	t.Run("Orders", testOrdersSliceDeleteAll)
	t.Run("PaymentStatuses", testPaymentStatusesSliceDeleteAll)
	t.Run("Variants", testVariantsSliceDeleteAll)
	t.Run("Videos", testVideosSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Articles", testArticlesExists)
	t.Run("BasePrices", testBasePricesExists)
	t.Run("Categories", testCategoriesExists)
	t.Run("Images", testImagesExists)
	t.Run("Messages", testMessagesExists)
	t.Run("OrderArticles", testOrderArticlesExists)
	t.Run("Orders", testOrdersExists)
	t.Run("PaymentStatuses", testPaymentStatusesExists)
	t.Run("Variants", testVariantsExists)
	t.Run("Videos", testVideosExists)
}

func TestFind(t *testing.T) {
	t.Run("Articles", testArticlesFind)
	t.Run("BasePrices", testBasePricesFind)
	t.Run("Categories", testCategoriesFind)
	t.Run("Images", testImagesFind)
	t.Run("Messages", testMessagesFind)
	t.Run("OrderArticles", testOrderArticlesFind)
	t.Run("Orders", testOrdersFind)
	t.Run("PaymentStatuses", testPaymentStatusesFind)
	t.Run("Variants", testVariantsFind)
	t.Run("Videos", testVideosFind)
}

func TestBind(t *testing.T) {
	t.Run("Articles", testArticlesBind)
	t.Run("BasePrices", testBasePricesBind)
	t.Run("Categories", testCategoriesBind)
	t.Run("Images", testImagesBind)
	t.Run("Messages", testMessagesBind)
	t.Run("OrderArticles", testOrderArticlesBind)
	t.Run("Orders", testOrdersBind)
	t.Run("PaymentStatuses", testPaymentStatusesBind)
	t.Run("Variants", testVariantsBind)
	t.Run("Videos", testVideosBind)
}

func TestOne(t *testing.T) {
	t.Run("Articles", testArticlesOne)
	t.Run("BasePrices", testBasePricesOne)
	t.Run("Categories", testCategoriesOne)
	t.Run("Images", testImagesOne)
	t.Run("Messages", testMessagesOne)
	t.Run("OrderArticles", testOrderArticlesOne)
	t.Run("Orders", testOrdersOne)
	t.Run("PaymentStatuses", testPaymentStatusesOne)
	t.Run("Variants", testVariantsOne)
	t.Run("Videos", testVideosOne)
}

func TestAll(t *testing.T) {
	t.Run("Articles", testArticlesAll)
	t.Run("BasePrices", testBasePricesAll)
	t.Run("Categories", testCategoriesAll)
	t.Run("Images", testImagesAll)
	t.Run("Messages", testMessagesAll)
	t.Run("OrderArticles", testOrderArticlesAll)
	t.Run("Orders", testOrdersAll)
	t.Run("PaymentStatuses", testPaymentStatusesAll)
	t.Run("Variants", testVariantsAll)
	t.Run("Videos", testVideosAll)
}

func TestCount(t *testing.T) {
	t.Run("Articles", testArticlesCount)
	t.Run("BasePrices", testBasePricesCount)
	t.Run("Categories", testCategoriesCount)
	t.Run("Images", testImagesCount)
	t.Run("Messages", testMessagesCount)
	t.Run("OrderArticles", testOrderArticlesCount)
	t.Run("Orders", testOrdersCount)
	t.Run("PaymentStatuses", testPaymentStatusesCount)
	t.Run("Variants", testVariantsCount)
	t.Run("Videos", testVideosCount)
}

func TestHooks(t *testing.T) {
	t.Run("Articles", testArticlesHooks)
	t.Run("BasePrices", testBasePricesHooks)
	t.Run("Categories", testCategoriesHooks)
	t.Run("Images", testImagesHooks)
	t.Run("Messages", testMessagesHooks)
	t.Run("OrderArticles", testOrderArticlesHooks)
	t.Run("Orders", testOrdersHooks)
	t.Run("PaymentStatuses", testPaymentStatusesHooks)
	t.Run("Variants", testVariantsHooks)
	t.Run("Videos", testVideosHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Articles", testArticlesInsert)
	t.Run("Articles", testArticlesInsertWhitelist)
	t.Run("BasePrices", testBasePricesInsert)
	t.Run("BasePrices", testBasePricesInsertWhitelist)
	t.Run("Categories", testCategoriesInsert)
	t.Run("Categories", testCategoriesInsertWhitelist)
	t.Run("Images", testImagesInsert)
	t.Run("Images", testImagesInsertWhitelist)
	t.Run("Messages", testMessagesInsert)
	t.Run("Messages", testMessagesInsertWhitelist)
	t.Run("OrderArticles", testOrderArticlesInsert)
	t.Run("OrderArticles", testOrderArticlesInsertWhitelist)
	t.Run("Orders", testOrdersInsert)
	t.Run("Orders", testOrdersInsertWhitelist)
	t.Run("PaymentStatuses", testPaymentStatusesInsert)
	t.Run("PaymentStatuses", testPaymentStatusesInsertWhitelist)
	t.Run("Variants", testVariantsInsert)
	t.Run("Variants", testVariantsInsertWhitelist)
	t.Run("Videos", testVideosInsert)
	t.Run("Videos", testVideosInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ImageToArticleUsingArticle", testImageToOneArticleUsingArticle)
	t.Run("OrderArticleToOrderUsingOrder", testOrderArticleToOneOrderUsingOrder)
	t.Run("VariantToArticleUsingArticle", testVariantToOneArticleUsingArticle)
	t.Run("VideoToArticleUsingArticle", testVideoToOneArticleUsingArticle)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ArticleToBasePrices", testArticleToManyBasePrices)
	t.Run("ArticleToCategories", testArticleToManyCategories)
	t.Run("ArticleToImages", testArticleToManyImages)
	t.Run("ArticleToVariants", testArticleToManyVariants)
	t.Run("ArticleToVideos", testArticleToManyVideos)
	t.Run("BasePriceToArticles", testBasePriceToManyArticles)
	t.Run("CategoryToArticles", testCategoryToManyArticles)
	t.Run("OrderToOrderArticles", testOrderToManyOrderArticles)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ImageToArticleUsingImages", testImageToOneSetOpArticleUsingArticle)
	t.Run("OrderArticleToOrderUsingOrderArticles", testOrderArticleToOneSetOpOrderUsingOrder)
	t.Run("VariantToArticleUsingVariants", testVariantToOneSetOpArticleUsingArticle)
	t.Run("VideoToArticleUsingVideos", testVideoToOneSetOpArticleUsingArticle)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ArticleToBasePrices", testArticleToManyAddOpBasePrices)
	t.Run("ArticleToCategories", testArticleToManyAddOpCategories)
	t.Run("ArticleToImages", testArticleToManyAddOpImages)
	t.Run("ArticleToVariants", testArticleToManyAddOpVariants)
	t.Run("ArticleToVideos", testArticleToManyAddOpVideos)
	t.Run("BasePriceToArticles", testBasePriceToManyAddOpArticles)
	t.Run("CategoryToArticles", testCategoryToManyAddOpArticles)
	t.Run("OrderToOrderArticles", testOrderToManyAddOpOrderArticles)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ArticleToBasePrices", testArticleToManySetOpBasePrices)
	t.Run("ArticleToCategories", testArticleToManySetOpCategories)
	t.Run("BasePriceToArticles", testBasePriceToManySetOpArticles)
	t.Run("CategoryToArticles", testCategoryToManySetOpArticles)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ArticleToBasePrices", testArticleToManyRemoveOpBasePrices)
	t.Run("ArticleToCategories", testArticleToManyRemoveOpCategories)
	t.Run("BasePriceToArticles", testBasePriceToManyRemoveOpArticles)
	t.Run("CategoryToArticles", testCategoryToManyRemoveOpArticles)
}

func TestReload(t *testing.T) {
	t.Run("Articles", testArticlesReload)
	t.Run("BasePrices", testBasePricesReload)
	t.Run("Categories", testCategoriesReload)
	t.Run("Images", testImagesReload)
	t.Run("Messages", testMessagesReload)
	t.Run("OrderArticles", testOrderArticlesReload)
	t.Run("Orders", testOrdersReload)
	t.Run("PaymentStatuses", testPaymentStatusesReload)
	t.Run("Variants", testVariantsReload)
	t.Run("Videos", testVideosReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Articles", testArticlesReloadAll)
	t.Run("BasePrices", testBasePricesReloadAll)
	t.Run("Categories", testCategoriesReloadAll)
	t.Run("Images", testImagesReloadAll)
	t.Run("Messages", testMessagesReloadAll)
	t.Run("OrderArticles", testOrderArticlesReloadAll)
	t.Run("Orders", testOrdersReloadAll)
	t.Run("PaymentStatuses", testPaymentStatusesReloadAll)
	t.Run("Variants", testVariantsReloadAll)
	t.Run("Videos", testVideosReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Articles", testArticlesSelect)
	t.Run("BasePrices", testBasePricesSelect)
	t.Run("Categories", testCategoriesSelect)
	t.Run("Images", testImagesSelect)
	t.Run("Messages", testMessagesSelect)
	t.Run("OrderArticles", testOrderArticlesSelect)
	t.Run("Orders", testOrdersSelect)
	t.Run("PaymentStatuses", testPaymentStatusesSelect)
	t.Run("Variants", testVariantsSelect)
	t.Run("Videos", testVideosSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Articles", testArticlesUpdate)
	t.Run("BasePrices", testBasePricesUpdate)
	t.Run("Categories", testCategoriesUpdate)
	t.Run("Images", testImagesUpdate)
	t.Run("Messages", testMessagesUpdate)
	t.Run("OrderArticles", testOrderArticlesUpdate)
	t.Run("Orders", testOrdersUpdate)
	t.Run("PaymentStatuses", testPaymentStatusesUpdate)
	t.Run("Variants", testVariantsUpdate)
	t.Run("Videos", testVideosUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Articles", testArticlesSliceUpdateAll)
	t.Run("BasePrices", testBasePricesSliceUpdateAll)
	t.Run("Categories", testCategoriesSliceUpdateAll)
	t.Run("Images", testImagesSliceUpdateAll)
	t.Run("Messages", testMessagesSliceUpdateAll)
	t.Run("OrderArticles", testOrderArticlesSliceUpdateAll)
	t.Run("Orders", testOrdersSliceUpdateAll)
	t.Run("PaymentStatuses", testPaymentStatusesSliceUpdateAll)
	t.Run("Variants", testVariantsSliceUpdateAll)
	t.Run("Videos", testVideosSliceUpdateAll)
}

/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./u_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?Object} options
 * @constructor
 * @struct
 * @final
 */
proto.SchemaServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options['format'] = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname;

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?Object} options
 * @constructor
 * @struct
 * @final
 */
proto.SchemaServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options['format'] = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname;

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Schema,
 *   !proto.Schema>}
 */
const methodDescriptor_SchemaService_getSchema = new grpc.web.MethodDescriptor(
  '/SchemaService/getSchema',
  grpc.web.MethodType.UNARY,
  proto.Schema,
  proto.Schema,
  /**
   * @param {!proto.Schema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Schema.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.Schema,
 *   !proto.Schema>}
 */
const methodInfo_SchemaService_getSchema = new grpc.web.AbstractClientBase.MethodInfo(
  proto.Schema,
  /**
   * @param {!proto.Schema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Schema.deserializeBinary
);


/**
 * @param {!proto.Schema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.Schema)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Schema>|undefined}
 *     The XHR Node Readable Stream
 */
proto.SchemaServiceClient.prototype.getSchema =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/SchemaService/getSchema',
      request,
      metadata || {},
      methodDescriptor_SchemaService_getSchema,
      callback);
};


/**
 * @param {!proto.Schema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Schema>}
 *     A native promise that resolves to the response
 */
proto.SchemaServicePromiseClient.prototype.getSchema =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/SchemaService/getSchema',
      request,
      metadata || {},
      methodDescriptor_SchemaService_getSchema);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Schema,
 *   !proto.SimpleResponse>}
 */
const methodDescriptor_SchemaService_setSchema = new grpc.web.MethodDescriptor(
  '/SchemaService/setSchema',
  grpc.web.MethodType.UNARY,
  proto.Schema,
  proto.SimpleResponse,
  /**
   * @param {!proto.Schema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.SimpleResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.Schema,
 *   !proto.SimpleResponse>}
 */
const methodInfo_SchemaService_setSchema = new grpc.web.AbstractClientBase.MethodInfo(
  proto.SimpleResponse,
  /**
   * @param {!proto.Schema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.SimpleResponse.deserializeBinary
);


/**
 * @param {!proto.Schema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.SimpleResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.SimpleResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.SchemaServiceClient.prototype.setSchema =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/SchemaService/setSchema',
      request,
      metadata || {},
      methodDescriptor_SchemaService_setSchema,
      callback);
};


/**
 * @param {!proto.Schema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.SimpleResponse>}
 *     A native promise that resolves to the response
 */
proto.SchemaServicePromiseClient.prototype.setSchema =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/SchemaService/setSchema',
      request,
      metadata || {},
      methodDescriptor_SchemaService_setSchema);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.RefreshTokenRequest,
 *   !proto.RefreshTokenResponse>}
 */
const methodDescriptor_SchemaService_refreshToken = new grpc.web.MethodDescriptor(
  '/SchemaService/refreshToken',
  grpc.web.MethodType.UNARY,
  proto.RefreshTokenRequest,
  proto.RefreshTokenResponse,
  /**
   * @param {!proto.RefreshTokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.RefreshTokenResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.RefreshTokenRequest,
 *   !proto.RefreshTokenResponse>}
 */
const methodInfo_SchemaService_refreshToken = new grpc.web.AbstractClientBase.MethodInfo(
  proto.RefreshTokenResponse,
  /**
   * @param {!proto.RefreshTokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.RefreshTokenResponse.deserializeBinary
);


/**
 * @param {!proto.RefreshTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.RefreshTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.RefreshTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.SchemaServiceClient.prototype.refreshToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/SchemaService/refreshToken',
      request,
      metadata || {},
      methodDescriptor_SchemaService_refreshToken,
      callback);
};


/**
 * @param {!proto.RefreshTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.RefreshTokenResponse>}
 *     A native promise that resolves to the response
 */
proto.SchemaServicePromiseClient.prototype.refreshToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/SchemaService/refreshToken',
      request,
      metadata || {},
      methodDescriptor_SchemaService_refreshToken);
};


module.exports = proto;


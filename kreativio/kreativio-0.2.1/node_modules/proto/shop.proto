// Copyright (c) 2019, Mohlmann Solutions SRL. All rights reserved.
// Use of this source code is governed by a License that can be found in the LICENSE file.
// SPDX-License-Identifier: BSD-3-Clause

syntax = "proto3";


package shop;

import "google/protobuf/timestamp.proto";

service Shop {
    // SaveArticle updates an article identified by ID.
    // If ID is unset (0) a new article is insered.
    // On success the affected article ID is returned.
    rpc SaveArticle (Article) returns (ArticleID) {}
    
    // ViewArticle identied by ID.
    rpc ViewArticle (ArticleID) returns (Article) {}

    // ListArticles filtered by ListCondtions.
    rpc ListArticles (ListConditions) returns (ArticleList) {}

    // DeleteArticle and all associated images and videos
    rpc DeleteArticle (ArticleID) returns (Deleted) {}

    // Checkout an order of articles
    rpc Checkout (Order) returns (OrderID) {}

    // ListOrders returns all orders
    rpc ListOrders (ListOrderConditions) returns (OrderList) {}

    // SaveOrder updates the order identified by ID.
    // It is not (yet) possibile to change the articles on an order.
    rpc SaveOrder (Order) returns (OrderID) {}

    // SaveCategories upserts the categories in the provided CategoryList.
    // Returned CategoryList is always in the same order as the provided one.
    //
    // New articles should have their ID field set to 0.
    // Those IDs will be populated in the reponse.
    // Existing categories should always keep the same ID
    // and is used for updates and re-sorting.
    rpc SaveCategories (CategoryList) returns (CategoryList) {}

    // ListCategories returns all categories, filtered by CategoryListConditions.
    // Returned CategoryList is always in the same order as passed to SaveCategories.
    rpc ListCategories (CategoryListConditions) returns (CategoryList) {}
    
    // SearchArticles returns ArticleList that matches TextSearch.value.
    rpc SearchArticles(TextSearch) returns (ArticleList) {}
    
    // Suggest returns a list of matching articles and categories
    rpc Suggest(TextSearch) returns (SuggestionList) {}

    // SaveBasePrice updates a base price identified by ID.
    // If ID is unset (0) a new base price is insered.
    // On success the affected base price is returned with its ID populated.
    rpc SaveBasePrice (BasePrice) returns (BasePrice) {}

    // DeleteBasePrice dis-assosiates all articles and deleted the given BasePrice
    rpc DeleteBasePrice (BasePrice) returns (Deleted) {}

    // ListBasePrices returns all base prices.
    rpc ListBasesPrices (BasePriceListCondtions) returns (BasePriceList) {}

    // SendMessage sends an email message to the site admin
    rpc SendMessage (Message) returns (MessageID) {}
}

message ArticleID {
    int32 id = 1;
    string token = 2; // Delete article requirement
}

message Media {
    int32 id = 1;
    string label = 2;
    string url = 3;
}

// BasePrice is an article's base price for dynamic calculation
message BasePrice {
    int32 id = 1;
    google.protobuf.Timestamp created = 2; // Read only
    google.protobuf.Timestamp updated = 3; // Read only
    string label = 4;
    string price = 5; // numeric
    string token = 6; // Admin write access requirement
}

message BasePriceListCondtions{}

message BasePriceList{
    repeated BasePrice list = 1;
}

// Variant is a price variation to an article.
message Variant {
    int64 id = 1;
    google.protobuf.Timestamp created = 2; // Read only
    google.protobuf.Timestamp updated = 3; // Read only
    // Labels allow for multi-dimensional price variations.
    repeated string labels = 4;
    string multiplier = 5; // numeric
}

message Details {
    BasePrice base_price = 1;
    Variant variant = 2;
}

message Article {
    int32 id = 1;
    google.protobuf.Timestamp created = 2; // Read only
    google.protobuf.Timestamp updated = 3; // Read only
    bool published = 4;
    string title = 5;
    string description = 6;
    string price = 7;
    repeated Media images = 8;
    repeated Media videos = 9;
    string token = 10; // Write only
    bool promoted = 11;
    repeated Category categories = 12;
    repeated BasePrice baseprices = 13;
    repeated Variant variants = 14;
}


// ListConditions are the conditions against which the article list is filtered.
// The conitions are aplied as AND.
// For example:
//   &ListCondions{
//      OnlyPublished: true,
//      OnlyCategoryLabel: "foo",
//   }
// Will result in articles that are published and have a category label of "foo".
//
// Conditions are ignored when in their default value.
// Meaning articles with any state for that field is returned.
message ListConditions {
    bool only_published = 1;
    bool only_promoted = 2;
    int32 only_category_id = 4;
    string only_category_label = 5;
}

message ArticleList {
    repeated Article list = 1;
}

message Deleted {
    int64 rows = 1;
}

message Order {
    enum PaymentMethod {
        CASH_ON_DELIVERY = 0;
        BANK_TRANSFER = 1;
        ONLINE = 2; // Not yet implemented
    }
    enum Status {
        OPEN = 0;
        SENT = 1;
        COMPLETED = 2;
    }
    message ArticleAmount {
        int32 article_id = 1;
        int32 amount = 2;
        string title = 3; // Read only
        string price = 4; // Read only
        string total = 5; // Read only; line total of Price*Amount
        Details details = 6; // Read only
        int32 base_price_id = 7; // Checkout write only
        int64 variant_id = 8; // Checkout write only
    }

    int32 id = 1;
    google.protobuf.Timestamp created = 2; // Read only
    google.protobuf.Timestamp updated = 3; // Read only
    string full_name = 4;
    string email = 5;
    string phone = 6;
    string full_address = 7;
    string message = 8;
    PaymentMethod payment_method = 9;
    Status status = 10; // Admin write access only
    repeated ArticleAmount articles = 11;
    string sum = 12; // Read Only; sum of all line totals
    string token = 13; // Admin write access requirement
}

message OrderID {
    int32 id = 1;
    string env_key = 2;
    string data = 3;
}

message ListOrderConditions {
    enum Status {
        ANY = 0;
        OPEN = 1;
        SENT = 2;
        COMPLETED = 3;
    }
    Status status = 1;
    string token = 2;
}

message OrderList {
    repeated Order list = 1;
}

message Category {
    int32 id = 1; // Upsert identification, do not modify. Leave 0 for new categories.
    google.protobuf.Timestamp created = 2; // Read only
    google.protobuf.Timestamp updated = 3; // Read only
    string label = 4;
}

// CategoryList holds an ordered list of Categories.
message CategoryList {
    repeated Category list = 1;
    string token = 2; // Admin write access requirement
}

message CategoryListConditions {
    bool only_published_articles = 1; // Only return categories that have published articles.
}

message TextSearch {
    string text = 1; // Search keyword
}

message SuggestionList {
    repeated Category Category = 1;
    repeated Article Article = 2;
}

message Message {
    int32 id = 1;           // Read-only
    string name = 2;        // Required
    string email = 3;       // Required
    string phone = 4;       // Optional
    string subject = 5;     // Optional
    string message = 6;     // Required
}

message MessageID {
    int32 id = 1;
}